use std::collections::HashMap;
use std::future::Future;
use std::pin::Pin;
use std::sync::RwLock;
use once_cell::sync::Lazy;
use axum::response::{Response};
use serde_json::Value;
use anyhow::Result;

pub type BoxFuture<'a, T> = Pin<Box<dyn Future<Output = T> + Send + 'a>>;

/// A type-erased handler for an API method.
pub struct ApiMethodHandler {
    pub operation_id: &'static str,
    pub handler: Box<
        dyn for<'a> Fn(&'a Value) -> BoxFuture<'a, Result<Response>> + Send + Sync,
    >,
}

impl std::fmt::Debug for ApiMethodHandler {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("ApiMethodHandler")
            .field("operation_id", &self.operation_id)
            .finish()
    }
}

/// A globally accessible, lazily initialized registry for all `ApiMethodHandler` instances.
pub static API_HANDLERS: Lazy<RwLock<HashMap<&'static str, ApiMethodHandler>>> = Lazy::new(|| {
    RwLock::new(HashMap::new())
});

/// A public function to register a handler.
/// This function will be called by the `#[ctor]` functions generated by the `api` macro.
pub fn register_handler(handler: ApiMethodHandler) {
    API_HANDLERS.write().unwrap().insert(handler.operation_id, handler);
}
